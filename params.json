{"name":"Alphas","tagline":"Play with alphabets","body":"Alphas.py\r\n======\r\n\r\nPlay with alphabets.\r\n\r\nThis module is for fun. It will try to do straight forward things which can be done with the alphabets.\r\n\r\n### Usage\r\n\r\n#### Import\r\n\r\n```\r\nfrom Alphas import core, crypt, fun, numsys\r\n```\r\n\r\n#### Core functions\r\n\r\n##### Listing alphabets\r\n```\r\n>>>\r\n>>> Alphas.core.alph(0,23)\r\n'abcdefghijklmnopqrstuvw'\r\n>>>\r\n>>> Alphas.core.ualph(0,23)\r\n'ABCDEFGHIJKLMNOPQRSTUVW'\r\n>>>\r\n>>> Alphas.core.alist(4,20)\r\n['e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't']\r\n>>>\r\n>>> Alphas.core.ualist(4,20)\r\n['E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T']\r\n>>>\r\n```\r\n\r\n##### Alphabets with dic\r\n```\r\n>>> Alphas.core.dic(0,2,6)\r\n{'f': 0, 'c': 0, 'd': 0, 'e': 0}\r\n>>>\r\n>>> Alphas.core.udic(0,2,6)\r\n{'E': 0, 'D': 0, 'C': 0, 'F': 0}\r\n>>>\r\n```\r\n##### Alphabets in numbers\r\n```\r\n>>> Alphas.core.ascii(5,10)\r\n{'i': 105, 'g': 103, 'h': 104, 'f': 102, 'j': 106}\r\n>>>\r\n>>> Alphas.core.uascii(5,10)\r\n{'I': 73, 'G': 71, 'H': 72, 'F': 70, 'J': 74}\r\n>>>\r\n```\r\n\r\n##### Vowels and Consonants\r\n```\r\n>>> Alphas.core.vowel()\r\n['a', 'e', 'i', 'o', 'u']\r\n>>>\r\n>>> Alphas.core.uvowel()\r\n['A', 'E', 'I', 'O', 'U']\r\n>>>\r\n>>> ac.consonants()\r\n['q', 'j', 'r', 'z', 't', 'f', 'c', 'n', 's', 'y', 'b', 'h', 'w', 'm', 'v', 'g', 'x', 'l', 'k', 'd', 'p']\r\n>>>\r\n>>> ac.uconsonants()\r\n['S', 'X', 'Y', 'C', 'N', 'L', 'K', 'B', 'F', 'W', 'H', 'J', 'M', 'T', 'G', 'P', 'V', 'D', 'Q', 'Z', 'R']\r\n>>>\r\n```\r\n\r\n##### Alphabets got permuted\r\n```\r\n>>> Alphas.core.perm(0,3)\r\n['abc', 'acb', 'bac', 'bca', 'cab', 'cba']\r\n>>>\r\n>>> Alphas.core.uperm(1,4)\r\n['BCD', 'BDC', 'CBD', 'CDB', 'DBC', 'DCB']\r\n>>>\r\n>>> Alphas.core.cyclic(0,5)\r\n['abcde', 'bcdea', 'cdeab', 'deabc', 'eabcd']\r\n>>>\r\n>>> Alphas.core.ucyclic(0,5)\r\n['ABCDE', 'BCDEA', 'CDEAB', 'DEABC', 'EABCD']\r\n>>>\r\n```\r\n\r\n#### Crypt functions\r\n##### Alphabets in cryptanalysis\r\n```\r\n>>>\r\n>>> Alphas.crypt.freqal(\"This module is for fun. It will try to do straight forward things which can be done with the alphabets.\")\r\n{'d': 4, 'i': 8, 'v': 0, 'p': 1, 'u': 2, 'y': 1, 'a': 5, 'b': 2, 'x': 0, 'o': 6, 'j': 0, 'q': 0, 'c': 2, 'e': 5, 'g': 2, 'h': 8, 'k': 0, 'z': 0, 'f': 3, 'n': 4, 'm': 1, 'w': 4, 'r': 5, 's': 5, 't': 10, 'l': 4}\r\n>>>\r\n```\r\n\r\n##### ROT Alphabets\r\n```\r\n>>> Alphas.crypt.rot(13,2,6)\r\n{'c': 'p', 'd': 'q', 'f': 's', 'e': 'r'}\r\n>>>\r\n>>> Alphas.crypt.urot(13,2,6)\r\n{'C': 'P', 'E': 'R', 'D': 'Q', 'F': 'S'}\r\n>>>\r\n```\r\n\r\n#### NumSys functions\r\n##### Alphabets in 0's and 1's\r\n```\r\n>>>\r\n>>> Alphas.numsys.binary('b')\r\n'1100010'\r\n>>>\r\n>>> Alphas.numsys.binary('B')\r\n'1000010'\r\n>>>\r\n>>> Alphas.numsys.bi(0,4)\r\n{'c': '1100011', 'd': '1100100', 'a': '1100001', 'b': '1100010'}\r\n>>>\r\n>>> Alphas.numsys.ubi(0,4)\r\n{'C': '1000011', 'A': '1000001', 'D': '1000100', 'B': '1000010'}\r\n>>>\r\n```\r\n##### Alphabets in 8's\r\n```\r\n>>> Alphas.numsys.octal('Z')\r\n'132'\r\n>>>\r\n>>> Alphas.numsys.octal('z')\r\n'172'\r\n>>>\r\n>>> Alphas.numsys.oct(20,26)\r\n{'z': '172', 'y': '171', 'v': '166', 'u': '165', 'w': '167', 'x': '170'}\r\n>>>\r\n>>> Alphas.numsys.uoct(20,26)\r\n{'Y': '131', 'W': '127', 'U': '125', 'V': '126', 'X': '130', 'Z': '132'}\r\n>>>\r\n```\r\n\r\n##### Alphabets in 16's (obviously)\r\n```\r\n>>> Alphas.numsys.hexadecimal('S')\r\n'53'\r\n>>>\r\n>>> Alphas.numsys.hexadecimal('s')\r\n'73'\r\n>>>\r\n>>> Alphas.numsys.hex(2,7)\r\n{'c': '63', 'd': '64', 'g': '67', 'f': '66', 'e': '65'}\r\n>>>\r\n>>> Alphas.numsys.uhex(2,7)\r\n{'C': '43', 'G': '47', 'E': '45', 'D': '44', 'F': '46'}\r\n>>>\r\n```\r\n\r\n#### Fun functions\r\n\r\n```\r\n>>>\r\n>>> Alphas.fun.braille(3,5)\r\n{'d': [[1, 1], [0, 1], [0, 0]], 'e': [[1, 0], [0, 1], [0, 0]]}\r\n>>>\r\n>>> Alphas.fun.morse('S')\r\n['...', 'di-di-dit']\r\n>>>\r\n>>> Alphas.fun.morse('Z')\r\n['__..', 'dah-dah-di-dit']\r\n>>>\r\n>>> Alphas.fun.nato('A')\r\n'Alfa'\r\n>>>\r\n>>> Alphas.fun.nato('d')\r\n'Delta'\r\n>>>\r\n>>> Alphas.fun.pronun('e')\r\n{'e': '/ˈiː/'}\r\n>>>\r\n>>> Alphas.fun.pronun('z')\r\n{'izzard': '/ˈɪzərd/', 'zee': '/ˈziː/', 'zed': '/ˈzɛd/'}\r\n>>>\r\n>>> Alphas.fun.song()\r\nA\r\nB\r\nC\r\nD\r\nE\r\nF\r\nG\r\nH\r\nI\r\nJ\r\nK\r\nLMNO\r\nP\r\nQ\r\nR\r\nS\r\nT\r\nU\r\nV\r\nW\r\nX\r\nY\r\nand\r\nZ\r\nNow I know my ABCs\r\nNext time, won't you sing with me?\r\n>>>\r\n>>> Alphas.fun.lovesong()\r\nA, you're adorable\r\nB, you're so beautiful\r\nC, you're a cutie full of charms\r\nD, you're a darling\r\nAnd E, you're exciting\r\nAnd F, you're a feather in my arms\r\nG, you look good to me\r\nH, you're so heavenly\r\nI, you're the one I idolize\r\nJ, we're like Jack and Jill\r\nK, you're so kissable\r\nL, is the love light in your eyes\r\nM, N, O, P\r\nI could go on all day\r\nQ, R, S, T\r\nAlphabetically speaking: \"You're OK\"\r\nU, made my life complete\r\nV, means you're very sweet\r\nW, X, Y, Z\r\nIt's fun to wander through the alphabet with you to tell you what you mean to me.\r\n>>>\r\n>>> Alphas.fun.country('A')\r\n['Abkhazia', 'Afghanistan', 'Akrotiri and Dhekelia(United Kingdom)', 'Albania', 'Algeria', 'American Samoa(United States)', 'Andorra', 'Angola', 'Anguilla(United Kingdom)', 'Antarctica', 'Antigua and Barbuda', 'Argentina', 'Armenia', 'Aruba(Netherlands)', 'Ashmore and Cartier Islands(Australia)', 'Australia', 'Austria', 'Azerbaijan']\r\n>>>\r\n>>> Alphas.fun.country('Z')\r\n['Zambia', 'Zimbabwe']\r\n>>>\r\n```\r\n\r\nYou can suggest more...","google":"UA-51512073-2","note":"Don't delete this file! It's used internally to help with page regeneration."}